import java.awt.EventQueue;
import java.awt.Image;
import java.awt.Toolkit;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.web.WebView;
import javax.swing.JPanel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JLabel;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Set;

import org.apache.jena.rdf.model.RDFNode;
import org.eclipse.rdf4j.query.resultio.sparqljson.SPARQLResultsJSONWriter;
import org.eclipse.rdf4j.repository.sparql.SPARQLRepository;



public class Main {

	private Queries q;

	private JFrame jFrame;

	private JPanel mapView;
	private JPanel imageView;
	private JFXPanel jfxPanel;
	private WebView webView;
	private String URL;

	private JMenuBar menuBar;
	private JMenu menuOption;
	private JMenuItem menuOption1;
	private JMenu menuHelp;

	private JLabel lblTipo;
	private JComboBox typeBox;
	private Object [] type = {"Accidents", "Dangerous crosses", "Safe routes"};
	private JComboBox fAccidentsFieldsBox;
	private Object[] fAccidentsFields;
	private JComboBox fAccidentsIdBox;
	private Object[] fAccidentsId;
	private JComboBox fVictimasFieldsBox;
	private Object [] fVictimasFields;
	private JComboBox fVictimsIdBox;
	private Object[] fVictimsId;
	private JComboBox fVictimasFieldRolBox;
	private Object [] fVictimasFieldRol;
	private JComboBox fVictimasFieldRangeBox;
	private Object [] fVictimasFieldRange;
	private JComboBox fVictimasFieldGenderBox;
	private Object [] fVictimasFieldGender;
	private JComboBox fVictimasFieldInjuryBox;
	private Object [] fVictimasFieldInjury;
	private JComboBox fDistritosBox;
	private Object [] fDistritos = {"Distrito"};
	private JComboBox fDistritosResultsBox;
	private Object [] fDistritosResults;

	JButton btnSearch;
	private JTextArea textArea;


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main window = new Main();

					//					Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
					//					window.jFrame.setBounds(100, 100, (int) dim.getWidth(), (int) dim.getHeight());
					//					//window.jFrame.setBounds(100, 100, 1920, 1080);
					//					window.jFrame.getContentPane().setBackground(Color.WHITE);
					//					window.jFrame.getContentPane().setLayout(null);
					//					window.jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
					//					window.jFrame.setTitle("SafeCycling");
					//					window.jFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
					//					window.jFrame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public Main() {
		this.q = new Queries();
		initialize();
	}

	//Este es el manejador de eventos.
	public void actionPerformed(ActionEvent arg0) {

	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {

		// Inicialización a pantalla completa
		jFrame = new JFrame();
		jFrame.setBounds(100, 100, 1920, 1080);
		jFrame.getContentPane().setBackground(Color.WHITE);
		jFrame.getContentPane().setLayout(null);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		jFrame.setTitle("SafeCycling");
		jFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
		jFrame.setVisible(true);
		
		File f = new File("logo.png");
		JLabel lblNewLabel = new JLabel(new ImageIcon(f.getName()));
		lblNewLabel.setBounds(763, 27, 297, 168);
		jFrame.getContentPane().add(lblNewLabel);


		resultPanel();

		menuBar();

		typeSearch();

		searchButton();



	}

	private Object[] fromRDFNodeToStringAO(ArrayList<RDFNode> list) {
		Object[] res = null;
		ArrayList<String> aux = new ArrayList<>();
		for (RDFNode e : list) {
			String a = e.toString().substring(81);
			aux.add(a.toString());
		}
		res = aux.toArray();
		return res;
	}

	private Object[] fromRDFNodeToStringDO(Set<String> set) {
		Object[] res = null;
		ArrayList<String> aux = new ArrayList<>();
		for (String e : set) {
			String a = e.toString().replace("_", " ");
			aux.add(a.toString());
		}
		res = aux.toArray();
		return res;
	}


	private Object[] fromRDFNodeToStringAId(ArrayList<RDFNode> list) {
		Object[] res = null;
		ArrayList<String> aux = new ArrayList<>();
		for (RDFNode e : list) {
			aux.add(e.toString());
		}
		res = aux.toArray();
		return res;
	}

	private ArrayList<String> fromRDFNodeToArrayString(ArrayList<RDFNode> list) {
		ArrayList<String> res = new ArrayList<>();
		for (RDFNode e : list) {
			res.add(e.toString());
		}
		return res;
	}
	
	private ArrayList<String> fromRDFNodeToArrayStringHasPlace(ArrayList<RDFNode> list) {
		ArrayList<String> res = new ArrayList<>();
		for (RDFNode e : list) {
			res.add(e.toString().replace("http://www.preventbicyleaccidents-app.es/group02/resources/Address/CALLE_", "").replace("_", " "));
		}
		return res;
	}

	// ******************************************************RESULTADOS******************************************************
	private void resultPanel() {
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(12, 415, 1048, 605);
		jFrame.getContentPane().add(scrollPane);
		textArea = new JTextArea();
		scrollPane.setViewportView(textArea);
		textArea.setBackground(Color.LIGHT_GRAY);
	}

	private void searchButton() {

		btnSearch = new JButton("Buscar");
		btnSearch.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (typeBox.getSelectedItem().toString().equals("Accidents")) {
					if(fAccidentsFieldsBox.isVisible() && (fAccidentsIdBox==null || !fAccidentsIdBox.isVisible()) && (fVictimasFieldsBox==null || !fVictimasFieldsBox.isVisible())){ // Añadir has place
						ArrayList<String> aux1 = new ArrayList<>();
						ArrayList<String> aux2 = new ArrayList<>();
						String res = "";
						if (!fAccidentsFieldsBox.getSelectedItem().toString().equals("hasIdAccident") && (fVictimasFieldsBox==null || !fVictimasFieldsBox.isVisible())) {
							aux1 = fromRDFNodeToArrayString(q.queryAccidentsFieldsOptions("hasIdAccident"));
							res += "hasIdAccident";
						}
						if (fAccidentsFieldsBox.getSelectedItem().toString().equals("hasPlace")) {
							aux2 = fromRDFNodeToArrayStringHasPlace(q.queryAccidentsFieldsOptions(fAccidentsFieldsBox.getSelectedItem().toString()));
						}else {
							aux2 = fromRDFNodeToArrayString(q.queryAccidentsFieldsOptions(fAccidentsFieldsBox.getSelectedItem().toString()));
						}
						res += "		" + fAccidentsFieldsBox.getSelectedItem().toString() + "\r\n\r\n";
						for(int i = 0; i < aux1.size(); i++) {
							res += aux1.get(i) + "		" + aux2.get(i) + "\r\n";
						}
						textArea.setText(res);
					} else if (fAccidentsFieldsBox.isVisible() && fAccidentsIdBox.isVisible() && fAccidentsIdBox.isVisible()){
						String res = "DETALLES DEL ACCIDENTE CON ID: " + fAccidentsIdBox.getSelectedItem().toString() + "\r\n\r\n";
						res += q.queryAccidentsId(fAccidentsIdBox.getSelectedItem().toString());
						textArea.setText(res);
					} else if (fAccidentsFieldsBox.isVisible() && fVictimasFieldsBox.isVisible() && fVictimsIdBox.isVisible()){
						String res = "DETALLES DE LA VICTIMA CON ID: " + fVictimsIdBox.getSelectedItem().toString() + "\r\n\r\n";
						res += q.queryVictimsId(fVictimsIdBox.getSelectedItem().toString());
						textArea.setText(res);
					} else if (fAccidentsFieldsBox.isVisible() && fVictimasFieldsBox.isVisible() && fVictimasFieldRangeBox.isVisible()) {
						String res = "El número de víctimas con este filtro es de: " + q.queryVictimsFieldsResults(fVictimasFieldsBox.getSelectedItem().toString(), fVictimasFieldRangeBox.getSelectedItem().toString()).replace("^^http://www.w3.org/2001/XMLSchema#integer", "");
						textArea.setText(res);
					}else if (fAccidentsFieldsBox.isVisible() && fVictimasFieldsBox.isVisible() && fVictimasFieldGenderBox.isVisible()) {
						String res = "El número de víctimas con este filtro es de: " + q.queryVictimsFieldsResults(fVictimasFieldsBox.getSelectedItem().toString(), fVictimasFieldGenderBox.getSelectedItem().toString()).replace("^^http://www.w3.org/2001/XMLSchema#integer", "");
						textArea.setText(res);
					} else if (fAccidentsFieldsBox.isVisible() && fVictimasFieldsBox.isVisible() && fVictimasFieldInjuryBox.isVisible()) {
						String res = "El número de víctimas con este filtro es de: " + q.queryVictimsFieldsResults(fVictimasFieldsBox.getSelectedItem().toString(), fVictimasFieldInjuryBox.getSelectedItem().toString()).replace("^^http://www.w3.org/2001/XMLSchema#integer", "");
						textArea.setText(res);
					} else if (fAccidentsFieldsBox.isVisible() && fVictimasFieldsBox.isVisible() && fVictimasFieldRolBox.isVisible()) {
						String res = "El número de víctimas con este filtro es de: " + q.queryVictimsFieldsResults(fVictimasFieldsBox.getSelectedItem().toString(), fVictimasFieldRolBox.getSelectedItem().toString()).replace("^^http://www.w3.org/2001/XMLSchema#integer", "");
						textArea.setText(res);
					}
				} else if (typeBox.getSelectedItem().toString().equals("Dangerous crosses")) {
					HashMap<String, String> auxMap = q.queryDistrictsOptions();
					String code = auxMap.get(fDistritosResultsBox.getSelectedItem().toString());
					// TestArea
					System.out.println(code);
					String res = "CRUCES PERTENECIENTES AL DISTRITO " + fDistritosResultsBox.getSelectedItem().toString() + "\r\n\r\n";
					res += q.queryCrossingDistrict(code);
					textArea.setText(res);

					// Imagen
					String wikimage = q.queryDistrictImage(fDistritosResultsBox.getSelectedItem().toString());
					System.out.println("HOLAAAAAAAAAAAAAAAA" + wikimage);
					String [] aux = wikimage.split("/");
					wikimage = aux[4];
					queryImagenDistrito(wikimage);
					
//					// Mapa
//					ArrayList<String> cruces = q.queryDistrictMapCrossing(fDistritosResultsBox.getSelectedItem().toString());
//					searchMap(cruces);


				} else if (typeBox.getSelectedItem().toString().equals("Safe routes")) {
					String code = q.queryDistrictsOptions().get(fDistritosResultsBox.getSelectedItem().toString());

					// TestArea
					String res = "CALLES SEGURAS PERTENECIENTES AL DISTRITO " + fDistritosResultsBox.getSelectedItem().toString() + "\r\n\r\n";
					res += q.querySafeAddressDistrict(code);
					textArea.setText(res);

					// Imagen
					String wikimage = q.queryDistrictImage(fDistritosResultsBox.getSelectedItem().toString());
					System.out.println("HOLAAAAAAAAAAAAAAAA" + wikimage);
					String [] aux = wikimage.split("/");
					wikimage = aux[4];
					queryImagenDistrito(wikimage);
					
					// Mapa
//					ArrayList<String> cruces = q.queryDistrictMapCrossing(fDistritosResultsBox.getSelectedItem().toString());
//					searchMap(cruces);


				}

			}
		});
		btnSearch.setBounds(436, 205, 97, 27);
		jFrame.getContentPane().add(btnSearch);
		btnSearch.setVisible(false);


	}





	// ******************************************************FTILROS******************************************************	
	private void typeSearch() {
		lblTipo = new JLabel("Choose your type search:");
		lblTipo.setBounds(12, 210, 163, 16);
		jFrame.getContentPane().add(lblTipo);

		typeBox = new JComboBox(type);
		typeBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				
				if (fAccidentsFieldsBox != null) {
					fAccidentsFieldsBox.setVisible(false);
				}
				if (fAccidentsIdBox != null) {
					fAccidentsIdBox.setVisible(false);
				}
				if (fVictimasFieldsBox != null) {
					fVictimasFieldsBox.setVisible(false);
				}
				if (fVictimsIdBox != null) {
					fVictimsIdBox.setVisible(false);		
				}
				if (fVictimasFieldRangeBox != null) {
					fVictimasFieldRangeBox.setVisible(false);
				}
				if (fVictimasFieldGenderBox != null) {
					fVictimasFieldGenderBox.setVisible(false);
				}
				if (fVictimasFieldInjuryBox != null) {
					fVictimasFieldInjuryBox.setVisible(false);
				}
				if (fVictimasFieldRolBox != null) {
					fVictimasFieldRolBox.setVisible(false);
				}
				if (fDistritosBox != null) {
					fDistritosBox.setVisible(false);
				}
				if (fDistritosResultsBox != null) {
					fDistritosResultsBox.setVisible(false);
				}
				filtrar(String.valueOf(typeBox.getSelectedItem()));
				btnSearch.setVisible(true);
			}
		});
		typeBox.setBounds(205, 203, 170, 30);
		jFrame.getContentPane().add(typeBox);
	}

	private void filtrar(String tipo) {
		switch(tipo){
		case "Accidents":
			fAccidentsSearch();
			if (fAccidentsFieldsBox != null) {
				fAccidentsFieldsBox.setVisible(true);
			}
			if (fAccidentsIdBox != null) {
				fAccidentsIdBox.setVisible(false);
			}
			if (fVictimasFieldsBox != null) {
				fVictimasFieldsBox.setVisible(false);
			}
			if (fVictimsIdBox != null) {
				fVictimsIdBox.setVisible(false);		
			}
			if (fVictimasFieldRangeBox != null) {
				fVictimasFieldRangeBox.setVisible(false);
			}
			if (fVictimasFieldGenderBox != null) {
				fVictimasFieldGenderBox.setVisible(false);
			}
			if (fVictimasFieldInjuryBox != null) {
				fVictimasFieldInjuryBox.setVisible(false);
			}
			if (fVictimasFieldRolBox != null) {
				fVictimasFieldRolBox.setVisible(false);
			}
			if (fDistritosBox != null) {
				fDistritosBox.setVisible(false);
			}
			if (fDistritosResultsBox != null) {
				fDistritosResultsBox.setVisible(false);
			}
			break;
		case "Dangerous crosses":
			fDangerousAndSafeSearch();
			if (fAccidentsFieldsBox != null) {
				fAccidentsFieldsBox.setVisible(false);
			}
			if (fAccidentsIdBox != null) {
				fAccidentsIdBox.setVisible(false);
			}
			if (fVictimasFieldsBox != null) {
				fVictimasFieldsBox.setVisible(false);
			}
			if (fVictimsIdBox != null) {
				fVictimsIdBox.setVisible(false);		
			}
			if (fVictimasFieldRangeBox != null) {
				fVictimasFieldRangeBox.setVisible(false);

			}
			if (fVictimasFieldGenderBox != null) {
				fVictimasFieldGenderBox.setVisible(false);

			}
			if (fVictimasFieldInjuryBox != null) {
				fVictimasFieldInjuryBox.setVisible(false);
			}
			if (fVictimasFieldRolBox != null) {
				fVictimasFieldRolBox.setVisible(false);
			}
			if (fDistritosBox != null) {
				fDistritosBox.setVisible(true);
			}			
			fDistritosOptionsSearch();
			break;
		case "Safe routes":
			fDangerousAndSafeSearch();
			if (fAccidentsFieldsBox != null) {
				fAccidentsFieldsBox.setVisible(false);
			}
			if (fAccidentsIdBox != null) {
				fAccidentsIdBox.setVisible(false);
			}
			if (fVictimasFieldsBox != null) {
				fVictimasFieldsBox.setVisible(false);
			}
			if (fVictimsIdBox != null) {
				fVictimsIdBox.setVisible(false);		
			}
			if (fVictimasFieldRangeBox != null) {
				fVictimasFieldRangeBox.setVisible(false);

			}
			if (fVictimasFieldGenderBox != null) {
				fVictimasFieldGenderBox.setVisible(false);

			}
			if (fVictimasFieldInjuryBox != null) {
				fVictimasFieldInjuryBox.setVisible(false);
			}
			if (fVictimasFieldRolBox != null) {
				fVictimasFieldRolBox.setVisible(false);
			}
			if (fDistritosBox != null) {
				fDistritosBox.setVisible(true);
			}
			fDistritosOptionsSearch();
			break;
		}
	}


	//*************************************************************ACCIDENTES***************************************************************


	private void fAccidentsSearch() {
		if (fDistritosBox != null) {
			fDistritosBox.setVisible(false);
		}
		fAccidentsFields = fromRDFNodeToStringAO(q.queryAccidentsFields());
		fAccidentsFieldsBox = new JComboBox(fAccidentsFields);
		fAccidentsIdBox = new JComboBox();
		fAccidentsFieldsBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// SI TIPO PERSONA AÑADIR OTRO FILTER BOX.
				switch(fAccidentsFieldsBox.getSelectedItem().toString()) {
				case "hasIdAccident":
					// Mostrar un TypeBox con cada uno de los id de los accidentes y poder así elegir de qué accidentes se quieren ver todos los datos
					fAccidentsIdSearch();
					if (fAccidentsIdBox != null) {
						fAccidentsIdBox.setVisible(true);
					}
					if (fVictimasFieldsBox != null) {
						fVictimasFieldsBox.setVisible(false);
					}
					if (fVictimsIdBox != null) {
						fVictimsIdBox.setVisible(false);		
					}
					if (fVictimasFieldRangeBox != null) {
						fVictimasFieldRangeBox.setVisible(false);

					}
					if (fVictimasFieldGenderBox != null) {
						fVictimasFieldGenderBox.setVisible(false);

					}
					if (fVictimasFieldInjuryBox != null) {
						fVictimasFieldInjuryBox.setVisible(false);
					}
					if (fVictimasFieldRolBox != null) {
						fVictimasFieldRolBox.setVisible(false);
					}
					break;
				case "hasVictim":
					fAccidentsFieldsOptionsSearch();
					if (fAccidentsIdBox != null) {
						fAccidentsIdBox.setVisible(false);
					}
					if (fVictimasFieldsBox != null) {
						fVictimasFieldsBox.setVisible(true);
					}
					if (fVictimsIdBox != null) {
						fVictimsIdBox.setVisible(false);		
					}
					if (fVictimasFieldRangeBox != null) {
						fVictimasFieldRangeBox.setVisible(false);

					}
					if (fVictimasFieldGenderBox != null) {
						fVictimasFieldGenderBox.setVisible(false);

					}
					if (fVictimasFieldInjuryBox != null) {
						fVictimasFieldInjuryBox.setVisible(false);
					}
					if (fVictimasFieldRolBox != null) {
						fVictimasFieldRolBox.setVisible(false);
					}
					break;

				case "hasPlace":
					if (fAccidentsIdBox != null) {
						fAccidentsIdBox.setVisible(false);
					}
					if (fVictimasFieldsBox != null) {
						fVictimasFieldsBox.setVisible(false);
					}
					if (fVictimsIdBox != null) {
						fVictimsIdBox.setVisible(false);		
					}
					if (fVictimasFieldRangeBox != null) {
						fVictimasFieldRangeBox.setVisible(false);

					}
					if (fVictimasFieldGenderBox != null) {
						fVictimasFieldGenderBox.setVisible(false);

					}
					if (fVictimasFieldInjuryBox != null) {
						fVictimasFieldInjuryBox.setVisible(false);
					}
					if (fVictimasFieldRolBox != null) {
						fVictimasFieldRolBox.setVisible(false);
					}
					break;
				default:
					if (fAccidentsIdBox != null) {
						fAccidentsIdBox.setVisible(false);
					}
					if (fVictimasFieldsBox != null) {
						fVictimasFieldsBox.setVisible(false);
					}
					if (fVictimsIdBox != null) {
						fVictimsIdBox.setVisible(false);		
					}
					if (fVictimasFieldRangeBox != null) {
						fVictimasFieldRangeBox.setVisible(false);

					}
					if (fVictimasFieldGenderBox != null) {
						fVictimasFieldGenderBox.setVisible(false);

					}
					if (fVictimasFieldInjuryBox != null) {
						fVictimasFieldInjuryBox.setVisible(false);
					}
					if (fVictimasFieldRolBox != null) {
						fVictimasFieldRolBox.setVisible(false);
					}
				}
			}
		});
		fAccidentsFieldsBox.setBounds(205, 246, 170, 30);
		jFrame.getContentPane().add(fAccidentsFieldsBox);
		fAccidentsFieldsBox.setVisible(false);
	}

	private void fAccidentsIdSearch() {
		fAccidentsId = fromRDFNodeToStringAId(q.queryAccidentsFieldsOptions("hasIdAccident"));
		fAccidentsIdBox = new JComboBox(fAccidentsId);
		fAccidentsIdBox.setBounds(205, 289, 170, 30);
		jFrame.getContentPane().add(fAccidentsIdBox);
		fAccidentsIdBox.setVisible(false);
	}


	
	//*************************************************************VICTIMAS***************************************************************

	private void fAccidentsFieldsOptionsSearch() {
		fVictimasFields = fromRDFNodeToStringAO(q.queryVictimasFields());
		fVictimasFieldsBox = new JComboBox(fVictimasFields);
		fVictimsIdSearch();
		fVictimasFieldRangeSearch();
		fVictimasFieldGenderSearch();
		fVictimasFieldInjurySearch();
		fVictimasFieldRolSearch();
		fVictimasFieldsBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// SI TIPO PERSONA AÑADIR OTRO FILTER BOX
				switch(fVictimasFieldsBox.getSelectedItem().toString()) {
				case "hasIdVictim":
					fVictimsIdBox.setVisible(true);		
					fVictimasFieldRangeBox.setVisible(false);
					fVictimasFieldGenderBox.setVisible(false);
					fVictimasFieldInjuryBox.setVisible(false);
					fVictimasFieldRolBox.setVisible(false);
					break;
				case "hasRangeAge":
					fVictimsIdBox.setVisible(false);		
					fVictimasFieldRangeBox.setVisible(true);
					fVictimasFieldGenderBox.setVisible(false);
					fVictimasFieldInjuryBox.setVisible(false);
					fVictimasFieldRolBox.setVisible(false);
					break;
				case "hasGender":
					fVictimsIdBox.setVisible(false);		
					fVictimasFieldRangeBox.setVisible(false);
					fVictimasFieldGenderBox.setVisible(true);
					fVictimasFieldInjuryBox.setVisible(false);
					fVictimasFieldRolBox.setVisible(false);
					break;
				case "gradeOfInjury":
					fVictimsIdBox.setVisible(false);		
					fVictimasFieldRangeBox.setVisible(false);
					fVictimasFieldGenderBox.setVisible(false);
					fVictimasFieldInjuryBox.setVisible(true);
					fVictimasFieldRolBox.setVisible(false);
					break;
				case "hasRole":
					fVictimsIdBox.setVisible(false);		
					fVictimasFieldRangeBox.setVisible(false);
					fVictimasFieldGenderBox.setVisible(false);
					fVictimasFieldInjuryBox.setVisible(false);
					fVictimasFieldRolBox.setVisible(true);
					break;
				}
			}
		});
		fVictimasFieldsBox.setBounds(205, 289, 170, 30);
		jFrame.getContentPane().add(fVictimasFieldsBox);
		fVictimasFieldsBox.setVisible(false);
	}
	
	private void fVictimsIdSearch() {
		fVictimsId = fromRDFNodeToStringAId(q.queryVictimsFieldsOptions("hasIdVictim"));
		fVictimsIdBox = new JComboBox(fVictimsId);
		fVictimsIdBox.setBounds(205, 332, 170, 30);
		jFrame.getContentPane().add(fVictimsIdBox);
		fVictimsIdBox.setVisible(false);
	}
	
	private void fVictimasFieldRangeSearch() {
		fVictimasFieldRange = fromRDFNodeToStringAId(q.queryVictimsFieldsOptions("hasRangeAge"));
		fVictimasFieldRangeBox = new JComboBox(fVictimasFieldRange);
		fVictimasFieldRangeBox.setBounds(205, 332, 170, 30);
		jFrame.getContentPane().add(fVictimasFieldRangeBox);
		fVictimasFieldRangeBox.setVisible(false);
	}
	

	private void fVictimasFieldRolSearch() {
		fVictimasFieldRol = fromRDFNodeToStringAId(q.queryVictimsFieldsOptions("hasRole"));
		fVictimasFieldRolBox = new JComboBox(fVictimasFieldRol);
		fVictimasFieldRolBox.setBounds(205, 332, 170, 30);
		jFrame.getContentPane().add(fVictimasFieldRolBox);
		fVictimasFieldRolBox.setVisible(false);
	}



	private void fVictimasFieldGenderSearch() {
		fVictimasFieldGender = fromRDFNodeToStringAId(q.queryVictimsFieldsOptions("hasGender"));
		fVictimasFieldGenderBox = new JComboBox(fVictimasFieldGender);
		fVictimasFieldGenderBox.setBounds(205, 332, 170, 30);
		jFrame.getContentPane().add(fVictimasFieldGenderBox);
		fVictimasFieldGenderBox.setVisible(false);
	}

	private void fVictimasFieldInjurySearch() {
		fVictimasFieldInjury = fromRDFNodeToStringAId(q.queryVictimsFieldsOptions("gradeOfInjury"));
		fVictimasFieldInjuryBox = new JComboBox(fVictimasFieldInjury);
		fVictimasFieldInjuryBox.setBounds(205, 332, 170, 30);
		jFrame.getContentPane().add(fVictimasFieldInjuryBox);
		fVictimasFieldInjuryBox.setVisible(false);
	}

	//*****************************************************************DISTRITOS**************************************************************
	private void fDistritosOptionsSearch() {
		if(fAccidentsFieldsBox != null) {
			fAccidentsFieldsBox.setVisible(false);
		}		
		fDistritosResults = fromRDFNodeToStringDO(q.queryDistrictsOptions().keySet());
		fDistritosResultsBox = new JComboBox(fDistritosResults);
		fDistritosResultsBox.setBounds(205, 289, 170, 30);
		jFrame.getContentPane().add(fDistritosResultsBox);
		fDistritosResultsBox.setVisible(true);
	}
	
	private void fDangerousAndSafeSearch() {
		if(fAccidentsFieldsBox != null) {
			fAccidentsFieldsBox.setVisible(false);
		}
		fDistritosBox = new JComboBox(fDistritos);
		fDistritosBox.setBounds(205, 246, 170, 30);
		jFrame.getContentPane().add(fDistritosBox);
		fDistritosBox.setVisible(false);
	}




	// ******************************************************MENÚ PROGRAMA******************************************************
	private void menuBar() {
		// Inicializamos los componentes del menú
		menuBar = new JMenuBar();
		menuBar.setBounds(0, 0, 1902, 26);
		jFrame.getContentPane().add(menuBar);

		menuOption = new JMenu("Options");
		menuBar.add(menuOption);

		menuOption1 = new JMenuItem("Option1");
		menuOption.add(menuOption1);

		menuHelp = new JMenu("Help");
		menuBar.add(menuHelp);

		JMenuItem menuInfo = new JMenuItem("Acerca de la aplicación");
		menuHelp.add(menuInfo);
	}



	private void searchMap(ArrayList<String> recurso) {
		// Panel para poder ver el mapa generado por la consulta
		mapView = new JPanel();
		mapView.setBackground(Color.WHITE);
		mapView.setBounds(1090, 415, 800, 605);
		jFrame.getContentPane().add(mapView);

		jfxPanel = new JFXPanel();
		mapView.add(jfxPanel);

		Platform.runLater(() -> {
			webView = new WebView();
			jfxPanel.setScene(new Scene(webView));
			String querySelect = 
				"SELECT * WHERE {\r\n";
			
			
			for(int i = 0; i < recurso.size(); i++) { 
				querySelect += "	wd:" + recurso.get(i) + " wdt:P625 ?geo" + i + ".\r\n";
			}
			
			querySelect += "}";
			
			System.out.println("Query selected: " + querySelect);

			querySelect = querySelect.replaceAll(" ", "%20");
			String queryEncoded = null;
			try {
				queryEncoded = URLEncoder.encode(
						querySelect, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			queryEncoded = queryEncoded.replaceAll("%25", "%");
			queryEncoded = queryEncoded.replaceAll("\\*", "%2a");
			String page = "https://query.wikidata.org/embed.html#" + queryEncoded;
			System.out.println(page);
			webView.getEngine().load(page);
		});
	}


	private void queryImagenDistrito(String distrito) {
		String sparqlEndpoint = "https://query.wikidata.org/sparql";
		SPARQLRepository repo = new SPARQLRepository(sparqlEndpoint);

		String userAgent = "Wikidata RDF4J Java Example/0.1 (https://query.wikidata.org/)";
		repo.setAdditionalHttpHeaders( Collections.singletonMap("User-Agent", userAgent ) );

		String querySelect = 
				"SELECT distinct ?image WHERE {\r\n" + 
				"	wd:" + distrito + " wdt:P18 ?image\r\n" + 
				"}";

		try{
			BufferedWriter ps = new BufferedWriter(new FileWriter("wikidata.json"));
			ps.write("");
			repo.getConnection().prepareTupleQuery(querySelect).evaluate(new SPARQLResultsJSONWriter(ps));
			ps.close();
		} catch ( Exception exception ) {
			exception.printStackTrace();
		}

		String link = "";
		try (BufferedReader br = new BufferedReader(new FileReader("wikidata.json"))) {
			while ((link = br.readLine()) != null) {
				if(link.contains("value")) {
					link = link.replace("\"value\" : ", "");
					link = link.replace("\"", "");
					String[] aux = link.split("/");
					link = aux[aux.length-1];
					link = link.replace("%20", "_");
					//link = link.replace("\"", "");
					System.out.println(link);
					URL = link;
				}

			}

		} catch (FileNotFoundException ex) {
			System.out.println(ex.getMessage());
		} catch (IOException ex) {
			System.out.println(ex.getMessage());
		}

		imageView = new JPanel();
		imageView.setBackground(Color.WHITE);
		imageView.setBounds(1090, 124, 800, 278);
		jFrame.getContentPane().add(imageView);

		jfxPanel = new JFXPanel();
		imageView.add(jfxPanel);

		Platform.runLater(() -> {
			webView = new WebView();
			jfxPanel.setScene(new Scene(webView));
			URL = "https://commons.wikimedia.org/w/index.php?title=Special:Redirect/file/" + URL;
			System.out.println("LINKKKKKKK: "+URL);
			webView.getEngine().load(URL);
			webView.setZoom(0.5);
		});

	}
}
