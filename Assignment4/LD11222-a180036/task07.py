# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tV5j-DRcpPtoJGoMj8v2DSqR_9wyXeiE

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/resources/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""
"""1. RDFLib"""
ns= Namespace("http://somewhere#")

for s, p, o in g.triples((None, RDFS.subClassOf, NS.Person)):
  print(s)

"""2. SPARQL"""
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

query1 = prepareQuery('''
  SELECT 
    ?x
  WHERE { 
    ?x rdfs:subClassOf ns:Person. 
  }
  ''',
  initNs = {"ns": ns }
)


for r in g.query(query1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**"""
"""1. RDFLib"""
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s)

"""2. SPARQL"""
query2 = prepareQuery('''
  SELECT ?x
  WHERE { 
    {?x rdf:type ns:Person.} 
    UNION
    {?x rdf:type ?m.
     ?m rdfs:subClassOf ns:Person }
  }
  ''',
  initNs = {"ns": ns }
)

for r in g.query(query2):
  print(r)
"""
**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**
"""
"""1. RDFLib"""
for s, p, o in g.triples((None, RDF.type, ns:Person)):
  for s1, p1, o1 in g,triples((s, None, None)):
    print(s1,p1,o1)

for s, p, o in g.triples((None, RDF.subClassOf, ns:Person)):
  for s1, p1, o1 in g.triples((None, RDF.type, s)):
    for s2, p2, o2 in g.triples((s1, None, None)):
      print(s2,p2,o2)

"""2. SPARQL"""

query3 = prepareQuery('''
  SELECT ?i  ?c ?x
  WHERE { 
    {?i rdf:type ns:Person.
     ?i ?c ?x.} 
     UNION 
    {?i rdf:type ?y.
    ?y rdfs:subClassOf ns:Person.
    ?i ?c ?x.}}
  ''',
  initNs = {"ns": ns }
)

for r in g.query(query3):
  print(r)