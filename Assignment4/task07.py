# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1faGRFmP4vLkoWhcLrk981zbVlJcslFGa

**Task 07: Querying RDF(s)**
"""

!pip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results

ns = Namespace("http://somewhere#")

for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
  print(s)

#for r in g.query(q1):
#  print(r)

from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
SELECT ?subject
WHERE {
  ?subject rdfs:subClassOf ns:Person.
}
''',
initNs = {"rdfs":RDFS, "ns":ns}
)

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s)

q2 = prepareQuery('''
  SELECT ?Person
  WHERE { 
    {
    ?Person rdf:type ns:Person.
    }
  }
  ''',
  initNs = { "ns": ns}
)

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**

"""

# TO DO
# Visualize the results

for s, p, o in g.triples((None, RDF.type, ns.Person)):
  for a,b,c in g.triples((s, None, None)):
      print(a,b,c)



for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for a,b,c in g.triples((None, RDF.type, s)):
    for x,y,z in g.triples((a, None, None)):
      print(x,y,z)

q4 = prepareQuery('''
 SELECT ?Person ?Prop ?c
  WHERE {
   {
    ?Person rdf:type ns:Person.
    ?Person ?Prop ?c

  }UNION{ 
     ?Person rdf:type ?a.
     ?Person ?Prop ?c.
     ?a rdfs:subClassOf ns:Person
   }
  }
  ''',
  initNs = { "ns": ns, "rdf": RDF, "rdfs": RDFS}
)

for a in g.query(q4):
  print(a)